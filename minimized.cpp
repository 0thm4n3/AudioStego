#include<iostream>
#include<fstream>
#include<vector>
#define MODULE 16
using namespace std;void OutputFile(ifstream& input,vector<char>& buffer);int PlayWithBuffer(vector<char>& buffer,string msg);int FindHiddenMessage(vector<char>& buffer,string& msg);int main(int argc,char*argv[]){string msg;string inputPath;string end="@<;";string temp;int mode=1;if(argc<2){cout<<"Where are my the parameters mate?"<<endl;return 0;}else if(argc==2){inputPath=argv[1];msg="Default Message KEKLIFE"+end;return 0;}else if(argc==3){inputPath=argv[1];temp=argv[2];if(temp=="-f" || temp=="--find"){mode=2;}else{msg=temp+end;}}ifstream input(inputPath,std::ios::binary);if(!input.is_open()){cout<<"Unable to open the file given"<<endl;return 0;}vector<char>buffer((istreambuf_iterator<char>(input)),(istreambuf_iterator<char>()));if(mode==1){int status=PlayWithBuffer(buffer,msg);if(status==1)OutputFile(input,buffer);else if(status==2)return 0;}else if(mode==2){int status=FindHiddenMessage(buffer,msg);if(status==1)cout<<"Message: "<<msg.c_str()<<endl;}vector<char>().swap(buffer);return 0;}int PlayWithBuffer(vector<char>& buffer,string msg){if((buffer.size()/MODULE)<msg.size()){cout<<"The message might be to big for the audio file"<<endl;return 2;}int n=0;int pos=0;for(vector<char>::iterator it=buffer.begin()+44;it !=buffer.end();++it){if(n%MODULE==0){*it=msg.at(pos);pos++;if(pos>=msg.size())break;}n++;}return 1;}int FindHiddenMessage(vector<char>& buffer,string& msg){int n=0;int pos=0;vector<char>::iterator tempiterator;for(vector<char>::iterator it=buffer.begin()+44;it !=buffer.end();++it){if(n%MODULE==0){if(*it==64){tempiterator=buffer.begin()+(MODULE+n)+44;if(*tempiterator==60){tempiterator=buffer.begin()+((2*MODULE)+n)+44;if(*tempiterator==59){cout<<"Message recovered"<<endl;return 1;}}}msg[pos]=*it;pos++;}n++;}cout<<"No message found :("<<endl;return 2;}int WriteMessageFromEnd(vector<char>& buffer,string msg){if((buffer.size()/4)<msg.size()){cout<<"The message might be to big for the audio file"<<endl;return 2;}int n=0;int pos=0;for(vector<char>::reverse_iterator i=buffer.rbegin();i !=buffer.rend();++i){if(n%1000==0){*i=msg.at(pos);pos++;cout<<*i<<endl;if(pos>=msg.size())break;}n++;}return 1;}void OutputFile(ifstream& input,vector<char>& buffer){ofstream output("myfile.wav",std::ios::binary);output.write((const char*)&buffer[0],buffer.size());output.close();cout<<"Message written in file"<<endl;}